@startuml CompleteActivityDiagram
header
<<<<<<< HEAD
generated on 15/03/2024 19:24:11
=======
generated on 19.03.2024 11:06:49
>>>>>>> c49a88c6559cc263bc6a855e1f0daab06cce608a
end header
title CompleteActivityDiagram
start
note right:  Program.Main
<<<<<<< HEAD
#LightGreen:Params(string[] args);
=======
#LightGreen:Params(string[] args)
>>>>>>> c49a88c6559cc263bc6a855e1f0daab06cce608a
#LightSkyBlue:string number1, number2, result;
#WhiteSmoke:PrintLine("Addieren von sehr großen Zahlen (Integer)");
#WhiteSmoke:PrintLine("=========================================");
#WhiteSmoke:number1 = ReadBigInteger("Geben Sie die erste Zahl ein: ");
#WhiteSmoke:number2 = ReadBigInteger("Geben Sie die zweite Zahl ein:");
#WhiteSmoke:result = AddBigInteger(number1, number2);
#WhiteSmoke:PrintLine("Summer der beiden Zahlen:");
#WhiteSmoke:PrintLine($"{result}");
#WhiteSmoke:PrintLine();
#WhiteSmoke:PrintLine("Beenden mit Eingabetaste... ");
#WhiteSmoke:ReadLine();
stop
start
note right:  Program.AddBigInteger
<<<<<<< HEAD
#LightGreen:Params(string number1, string number2);
=======
#LightGreen:Params(string number1,string number2)
>>>>>>> c49a88c6559cc263bc6a855e1f0daab06cce608a
#LightSkyBlue:string result = string.Empty
int maxNumber = Math.Max(number1.Length, number2.Length) + 1
bool carry = false;
#WhiteSmoke:number1 = AddLeadingCharacters(number1, '0', maxNumber - number1.Length);
#WhiteSmoke:number2 = AddLeadingCharacters(number2, '0', maxNumber - number2.Length);
#LightSkyBlue:int i = number1.Length - 1;
while (i >= 0) is (<color:green>yes)
    #LightSkyBlue:int sum = number1[i] - '0' + number2[i] - '0' + (carry ? 1 : 0);
    if (sum < 10) then (<color:green>yes)
        #WhiteSmoke:result = sum.ToString() + result;
        #WhiteSmoke:carry = false;
      else (<color:red>no)
          #WhiteSmoke:result = (sum % 10).ToString() + result;
          #WhiteSmoke:carry = true;
    endif
:i--;
endwhile (<color:red>no)
#Lavender:return result;
stop
start
note right:  Program.AddLeadingCharacters
<<<<<<< HEAD
#LightGreen:Params(string number, char chr, int count);
=======
#LightGreen:Params(string number,char chr,int count)
>>>>>>> c49a88c6559cc263bc6a855e1f0daab06cce608a
#LightSkyBlue:string result = number
int length = number.Length + count;
while (result.Length < length) is (<color:green>yes)
    #WhiteSmoke:result = chr + result;
endwhile (<color:red>no)
#Lavender:return result;
stop
start
note right:  Program.ReadBigInteger
<<<<<<< HEAD
#LightGreen:Params(string prompt);
=======
#LightGreen:Params(string prompt)
>>>>>>> c49a88c6559cc263bc6a855e1f0daab06cce608a
#LightSkyBlue:string result
bool validInput;
repeat
    #WhiteSmoke:Print(prompt);
    #WhiteSmoke:result = ReadLine();
    #WhiteSmoke:validInput = IsBigNumber(result);
    if (validInput == false) then (<color:green>yes)
        #WhiteSmoke:PrintLine("Ungültige Eingabe!");
    endif
repeat while (validInput == false) is (<color:green>yes)
#Lavender:return result;
stop
start
note right:  Program.IsBigNumber
<<<<<<< HEAD
#LightGreen:Params(string number);
=======
#LightGreen:Params(string number)
>>>>>>> c49a88c6559cc263bc6a855e1f0daab06cce608a
#LightSkyBlue:bool result = number.Length > 0
int idx = 0;
while (idx < number.Length && result) is (<color:green>yes)
    #WhiteSmoke:result = char.IsDigit(number[idx++]);
endwhile (<color:red>no)
#Lavender:return result;
stop
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
@enduml
