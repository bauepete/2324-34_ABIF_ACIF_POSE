@startuml Program.Main
title Program.Main
start
#Lavender:Params(string[] args);
#LightBlue:string input
int counterInSec = 0
double distanceInKm, distanceInM, way = 0
double speedInKmh_A, speedInKmh_B, speedInSec_A, speedInSec_B
double distanceInM_A, distanceInM_B;
:PrintLine("Lienar Motion");
:PrintLine("=============");
:PrintLine();
:PrintLine("Begegnung zweier entgegenfahrender Fahrzeuge");
:PrintLine();
:Print("Entfernung [positive Ganzzahl in km]:                         ");
:input = ReadLine();
:distanceInKm = Convert.ToDouble(input);
:distanceInM = distanceInKm * 1_000;
:Print("Geschwindigkeit des Fahrzeuges A [positive Ganzzahl in km/h]: ");
:input = ReadLine();
:speedInKmh_A = Convert.ToDouble(input);
:speedInSec_A = speedInKmh_A / 3.6;
:Print("Geschwindigkeit des Fahrzeuges B [positive Ganzzahl in km/h]: ");
:input = ReadLine();
:speedInKmh_B = Convert.ToDouble(input);
:speedInSec_B = speedInKmh_B / 3.6;
:PrintLine();
while (way < distanceInM) is (<color:green>yes)
    :way = (speedInSec_A + speedInSec_B) * counterInSec;
    :distanceInM_A = way * speedInSec_A / (speedInSec_A + speedInSec_B);
    :distanceInM_B = way * speedInSec_B / (speedInSec_A + speedInSec_B);
    if (counterInSec % 60 == 0) then (<color:green>yes)
        :PrintLine($"Minute: {counterInSec / 60,4} | Position A: {distanceInM_A / 1_000,6:f} km | Position B: {distanceInM_B / 1_000,6:f} km | Distanz: {Math.Abs(distanceInM - distanceInM_A - distanceInM_B) / 1_000,6:f}");
    endif
    :counterInSec++;
endwhile (<color:red>no)
:counterInSec = counterInSec > 0 ? counterInSec - 1 : counterInSec;
:distanceInM_A = distanceInM * speedInSec_A / (speedInSec_A + speedInSec_B);
:distanceInM_B = distanceInM * speedInSec_B / (speedInSec_A + speedInSec_B);
:PrintLine();
:PrintLine($"Treffpunkt von A nach {distanceInM_A / 1_000:f} km und von B nach {distanceInM_B / 1_000:f} km nach {counterInSec / 3_600} Stunden, {(counterInSec % 3_600) / 60} Minuten und {counterInSec % 60} Sekunden");
:PrintLine();
:PrintLine("Press any key to exit: ");
:ReadKey();
stop
@enduml
