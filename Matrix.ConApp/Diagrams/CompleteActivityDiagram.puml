@startuml CompleteActivityDiagram
header
generated on 12.03.2024 22:57:03
end header
title CompleteActivityDiagram
start
note right:  Program.Main
#LightBlue:string input
int rows, cols;
repeat
    :ReadMatrixDimensions(out rows, out cols);
    #LightBlue:int[,] matrix = CreateMatrix(rows, cols);
    :CompareAndPrintMatrix(matrix);
    :Print("Weitere Matrix anzeigen (j/n)? ");
    :input = ReadLine();
repeat while (input.ToLower() == "j") is (<color:green>yes)
stop
start
note right:  Program.ReadMatrixDimensions
#Lavender:Params(out int rows, out int cols);
#LightBlue:string input
bool validInput;
repeat
    :Print("Zeilen:  ");
    :input = ReadLine();
    :validInput = int.TryParse(input, out rows);
    if (!validInput) then (<color:green>yes)
        :PrintLine("Ungültige Eingabe. Bitte geben Sie eine positive ganze Zahl ein.");
    endif
repeat while (!validInput) is (<color:green>yes)
repeat
    :Print("Spalten: ");
    :input = ReadLine();
    :validInput = int.TryParse(input, out cols);
    if (!validInput) then (<color:green>yes)
        :PrintLine("Ungültige Eingabe. Bitte geben Sie eine positive ganze Zahl ein.");
    endif
repeat while (!validInput) is (<color:green>yes)
stop
start
note right:  Program.CreateMatrix
#Lavender:Params(int rows, int cols);
#LightBlue:int[,] result = new int[Math.Max(0, rows), Math.Max(0, cols)];
#LightBlue:int i = 0;
while (i < result.GetLength(0)) is (<color:green>yes)
    #LightBlue:int j = 0;
    while (j < result.GetLength(1)) is (<color:green>yes)
        :result[i, j] = Random.Shared.Next(MIN_NUMBER, MAX_NUMBER + 1);
    :j++;
    endwhile (<color:red>no)
:i++;
endwhile (<color:red>no)
#Lavender:return result;
stop
start
note right:  Program.CompareAndPrintMatrix
#Lavender:Params(int[,] matrix);
#LightBlue:ConsoleColor originalColor = Console.ForegroundColor;
#LightBlue:int r = 0;
while (r < matrix.GetLength(0)) is (<color:green>yes)
    :CompareAndPrintMatrixValues(matrix, r);
    :PrintLine();
    if (r < matrix.GetLength(0) - 1) then (<color:green>yes)
        :CompareAndPrintMatrixRows(matrix, r, r + 1);
        :PrintLine();
    endif
:r++;
endwhile (<color:red>no)
:PrintLine();
:Console.ForegroundColor = originalColor;
stop
start
note right:  Program.CompareAndPrintMatrixValues
#Lavender:Params(int[,] matrix, int row);
#LightBlue:ConsoleColor originalColor = Console.ForegroundColor
ConsoleColor valueColor = ConsoleColor.Yellow
ConsoleColor relationColor = ConsoleColor.Red
ConsoleColor equalsColor = ConsoleColor.Green;
#LightBlue:int c = 0;
while (c < matrix.GetLength(1)) is (<color:green>yes)
    :Console.ForegroundColor = valueColor;
    :Print($"{matrix[row, c]}");
    if (c < matrix.GetLength(1) - 1) then (<color:green>yes)
        if (matrix[row, c] > matrix[row, c + 1]) then (<color:green>yes)
            :Console.ForegroundColor = relationColor;
            :Print(" > ");
          else (<color:red>no)
            if (matrix[row, c] < matrix[row, c + 1]) then (<color:green>yes)
                :Console.ForegroundColor = relationColor;
                :Print(" < ");
              else (<color:red>no)
                  :Console.ForegroundColor = equalsColor;
                  :Print(" = ");
            endif
        endif
      else (<color:red>no)
          :Print(" ");
    endif
:c++;
endwhile (<color:red>no)
:Console.ForegroundColor = originalColor;
stop
start
note right:  Program.CompareAndPrintMatrixRows
#Lavender:Params(int[,] matrix, int firstRow, int secondRow);
#LightBlue:ConsoleColor originalColor = Console.ForegroundColor
ConsoleColor relationColor = ConsoleColor.Red
ConsoleColor equalsColor = ConsoleColor.Green;
if (firstRow >= 0 && firstRow < matrix.GetLength(0) && secondRow >= 0 && secondRow < matrix.GetLength(0)) then (<color:green>yes)
    #LightBlue:int c = 0;
    while (c < matrix.GetLength(1)) is (<color:green>yes)
        if (matrix[firstRow, c] > matrix[secondRow, c]) then (<color:green>yes)
            :Console.ForegroundColor = relationColor;
            :Print("V   ");
          else (<color:red>no)
            if (matrix[firstRow, c] < matrix[secondRow, c]) then (<color:green>yes)
                :Console.ForegroundColor = relationColor;
                :Print("A   ");
              else (<color:red>no)
                  :Console.ForegroundColor = equalsColor;
                  :Print("=   ");
            endif
        endif
    :c++;
    endwhile (<color:red>no)
endif
:Console.ForegroundColor = originalColor;
stop
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
@enduml
