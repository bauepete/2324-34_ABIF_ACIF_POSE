@startuml CompleteActivityDiagram
header
generated on 05.03.2024 11:15:20
end header
title CompleteActivityDiagram
start
note right:  Program.Main
:PrintLine("PlantUML-Creator");
#LightBlue:var slnPath = GetCurrentSolutionPath()
var files = GetSourceCodeFiles(slnPath, ["*.cs"]);
:iterator = files.GetIterator();
while (iterator.MoveNext()) is (<color:green>yes)
:current = iterator.Current();
      #LightBlue:var sourcePath = Path.GetDirectoryName(current);
      #LightBlue:var diagramsPath = Path.Combine(sourcePath!, "Diagrams");
      #LightBlue:var source = File.ReadAllText(current!);
      :UMLCreator.CreateActivityDiagram(diagramsPath, source);
endwhile (<color:red>no)
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
stop
start
note right:  Program.GetSourceCodeFiles
#LightBlue:var result = new List<string>()
var ignoreFolders = new string[] { $"{Path.DirectorySeparatorChar}bin{Path.DirectorySeparatorChar}", $"{Path.DirectorySeparatorChar}obj{Path.DirectorySeparatorChar}" };
:iterator = searchPatterns.GetIterator();
while (iterator.MoveNext()) is (<color:green>yes)
:current = iterator.Current();
      :result.AddRange(Directory.GetFiles(path, current, SearchOption.AllDirectories)
                      .Where(f => ignoreFolders.Any(e => f.Contains(e)) == false)
                      .OrderBy(i => i));
endwhile (<color:red>no)
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
stop
start
note right:  StringExtensions.SetIndent
if (lines != null) then (<color:green>yes)
    #LightBlue:int i = 0;
    while (i < lines.Length) is (<color:green>yes)
        :lines[i] = lines[i].SetIndent(count);
    :i++;
    endwhile (<color:red>no)
endif
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
stop
start
note right:  UMLCreator.AnalysisStatement
if (syntaxNode is LocalDeclarationStatementSyntax localDeclarationStatement) then (<color:green>yes)
    :diagramData.Add($":{localDeclarationStatement.Declaration};".SetIndent(level));
  else (<color:red>no)
    if (syntaxNode is ExpressionStatementSyntax expressionStatement) then (<color:green>yes)
        #LightBlue:var expression = expressionStatement.ToString();
        :expression = expression.Replace("PrintLine", "PrintLine");
        :expression = expression.Replace("PrintLine", "PrintLine");
        :expression = expression.Replace("Print", "Print");
        :expression = expression.Replace("Print", "Print");
        :expression = expression.Replace("ReadLine", "ReadLine");
        :expression = expression.Replace("ReadLine", "ReadLine");
        :expression = expression.Replace("Read", "Read");
        :expression = expression.Replace("Read", "Read");
        :diagramData.Add($":{expression}".SetIndent(level));
      else (<color:red>no)
        if (syntaxNode is BlockSyntax blockSyntax) then (<color:green>yes)
            :iterator = blockSyntax.ChildNodes().GetIterator();
            while (iterator.MoveNext()) is (<color:green>yes)
            :current = iterator.Current();
                              if (current is StatementSyntax statementSyntax) then (<color:green>yes)
                                  :AnalysisStatement(statementSyntax, diagramData, level + 1);
                              endif
            endwhile (<color:red>no)
          else (<color:red>no)
            if (syntaxNode is IfStatementSyntax ifStatement) then (<color:green>yes)
                :diagramData.Add($"if ({ifStatement.Condition}) then (yes)".SetIndent(level));
                :AnalysisStatement(ifStatement.Statement, diagramData, level + 1);
                if (ifStatement.Else != null) then (<color:green>yes)
                  :AnalysisStatement(ifStatement.Else, diagramData, level + 1);
                endif
                :diagramData.Add("endif".SetIndent(level));
              else (<color:red>no)
                if (syntaxNode is ElseClauseSyntax elseClause) then (<color:green>yes)
                    :diagramData.Add($"else (no)".SetIndent(level));
                    :AnalysisStatement(elseClause.Statement, diagramData, level + 1);
                  else (<color:red>no)
                    if (syntaxNode is SwitchStatementSyntax switchStatement) then (<color:green>yes)
                        :diagramData.Add($"switch ({switchStatement.Expression})".SetIndent(level));
                        :iterator = switchStatement.Sections.GetIterator();
                        while (iterator.MoveNext()) is (<color:green>yes)
                        :current = iterator.Current();
                                                      #LightBlue:var labels = $"{current.Labels}".Replace("case", "case(");
                                                      if (labels.Contains("default:")) then (<color:green>yes)
                                                        :labels = labels.Replace("default:", "case ( default )");
                                                        else (<color:red>no)
                                                          :labels = labels.Replace(":", " )");
                                                      endif
                                                      :diagramData.Add($"{labels}".SetIndent(level + 1));
                                                      :iterator = current.ChildNodes().GetIterator();
                                                      while (iterator.MoveNext()) is (<color:green>yes)
                                                      :current = iterator.Current();
                                                                                        if (current is StatementSyntax statementSyntax) then (<color:green>yes)
                                                                                            :AnalysisStatement(statementSyntax, diagramData, level + 1);
                                                                                        endif
                                                      endwhile (<color:red>no)
                        endwhile (<color:red>no)
                        :diagramData.Add("endswitch".SetIndent(level));
                      else (<color:red>no)
                        if (syntaxNode is BreakStatementSyntax breakStatement) then (<color:green>yes)
                            :System.Diagnostics.Debug.WriteLine($"{nameof(breakStatement)} is known but not used!");
                          else (<color:red>no)
                            if (syntaxNode is ContinueStatementSyntax continueStatement) then (<color:green>yes)
                                :System.Diagnostics.Debug.WriteLine($"{nameof(continueStatement)} is known but not used!");
                              else (<color:red>no)
                                if (syntaxNode is DoStatementSyntax doStatement) then (<color:green>yes)
                                    :diagramData.Add("repeat".SetIndent(level));
                                    :AnalysisStatement(doStatement.Statement, diagramData, level + 1);
                                    :diagramData.Add($"repeat while ({doStatement.Condition}) is (yes)".SetIndent(level));
                                  else (<color:red>no)
                                    if (syntaxNode is WhileStatementSyntax whileStatement) then (<color:green>yes)
                                        :diagramData.Add($"while ({whileStatement.Condition}) is (yes)".SetIndent(level));
                                        :AnalysisStatement(whileStatement.Statement, diagramData, level + 1);
                                        :diagramData.Add("endwhile (no)".SetIndent(level));
                                      else (<color:red>no)
                                        if (syntaxNode is ForStatementSyntax forStatement) then (<color:green>yes)
                                            :diagramData.Add($":{forStatement.Declaration};".SetIndent(level));
                                            :diagramData.Add($"while ({forStatement.Condition}) is (yes)".SetIndent(level));
                                            :AnalysisStatement(forStatement.Statement, diagramData, level + 1);
                                            if (forStatement.Incrementors.Count > 0) then (<color:green>yes)
                                              :diagramData.Add($":{forStatement.Incrementors};".SetIndent(level));
                                            endif
                                            :diagramData.Add("endwhile (no)".SetIndent(level));
                                          else (<color:red>no)
                                            if (syntaxNode is ForEachStatementSyntax forEachStatement) then (<color:green>yes)
                                                #LightBlue:var statements = new List<string>();
                                                :diagramData.Add($":iterator = {forEachStatement.Expression}.GetIterator();".SetIndent(level));
                                                :diagramData.Add($"while (iterator.MoveNext()) is (yes)".SetIndent(level));
                                                :diagramData.Add($":current = iterator.Current();".SetIndent(level));
                                                :AnalysisStatement(forEachStatement.Statement, statements, level + 1);
                                                :iterator = statements.GetIterator();
                                                while (iterator.MoveNext()) is (<color:green>yes)
                                                :current = iterator.Current();
                                                                                                      :diagramData.Add(current.Replace(forEachStatement.Identifier.ToString(), "current").SetIndent(level + 1));
                                                endwhile (<color:red>no)
                                                :diagramData.Add("endwhile (no)".SetIndent(level));
                                              else (<color:red>no)
                                                if (syntaxNode is ReturnStatementSyntax returnStatement) then (<color:green>yes)
                                                    :System.Diagnostics.Debug.WriteLine($"{nameof(returnStatement)} is known but not used!");
                                                  else (<color:red>no)
                                                      :System.Diagnostics.Debug.WriteLine($"{syntaxNode.GetType().Name} is unknown!");
                                                endif
                                            endif
                                        endif
                                    endif
                                endif
                            endif
                        endif
                    endif
                endif
            endif
        endif
    endif
endif
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
stop
start
note right:  Program.GetCurrentSolutionPath
#LightBlue:int endPos = AppContext.BaseDirectory
                                   .IndexOf($"{nameof(PlantUML)}", StringComparison.CurrentCultureIgnoreCase)
var result = AppContext.BaseDirectory[..endPos];
while (result.EndsWith(Path.DirectorySeparatorChar)) is (<color:green>yes)
    :result = result[0..^1];
endwhile (<color:red>no)
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
stop
start
note right:  UMLCreator.CreateActivityDiagram
#LightBlue:var diagramData = new List<string>()
var statements = methodNode?.Body?.Statements;
:iterator = statements!.GetIterator();
while (iterator.MoveNext()) is (<color:green>yes)
:current = iterator.Current();
      :AnalysisStatement(current, diagramData, 0);
endwhile (<color:red>no)
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
stop
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
@enduml
