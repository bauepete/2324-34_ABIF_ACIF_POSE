@startuml CompleteActivityDiagram
header
generated on 05.03.2024 11:15:20
end header
title CompleteActivityDiagram
start
note right:  Program.Main
#LightBlue:double far, points
double[] posturePoints;
:PrintLine("Notenermittlung für Skispringer");
:PrintLine("===============================");
:far = ReadJumpFar();
:PrintLine();
:posturePoints = ReadPosturePoints(5);
:points = CalculateJump(far) + CalculatePosturePoints(posturePoints);
:PrintLine();
:PrintLine($"Weitenpunkte: {CalculateJump(far):f} Haltungsnote: {CalculatePosturePoints(posturePoints):f} Gesamt: {points:f}");
:PrintLine();
:PrintLine("Beenden mit Eingabetaste... ");
:ReadLine();
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
stop
start
note right:  Program.ReadJumpFar
#LightBlue:double result
string input
bool valid = false;
repeat
    :Print($"Weite in Meter [0-200]: ");
    :input = ReadLine();
    if (double.TryParse(input, out result) && result >= 0 && result <= 200) then (<color:green>yes)
        :valid = true;
      else (<color:red>no)
          :PrintLine("Ungültige Eingabe!");
    endif
repeat while (valid == false) is (<color:green>yes)
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
stop
start
note right:  Program.ReadPosturePoints
#LightBlue:int idx = 0
string input
double[] result = new double[count];
while (idx < count) is (<color:green>yes)
    :Print($"Wertungsrichter {idx + 1} [0-20]: ");
    :input = ReadLine();
    if (double.TryParse(input, out result[idx]) 
                    && result[idx] >= 0 
                    && result[idx] <= 20 
                    && (result[idx] % 1 == 0 || result[idx] % 1 == 0.5)) then (<color:green>yes)
        :idx++;
      else (<color:red>no)
          :PrintLine("Ungültige Eingabe!");
    endif
endwhile (<color:red>no)
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
stop
start
note right:  Program.CalculatePosturePoints
#LightBlue:double result = 0
double max = Double.MinValue
double min = Double.MaxValue;
#LightBlue:int i = 0;
while (i < posturePoints.Length) is (<color:green>yes)
    if (posturePoints[i] > max) then (<color:green>yes)
        :max = posturePoints[i];
    endif
    if (posturePoints[i] < min) then (<color:green>yes)
        :min = posturePoints[i];
    endif
    :result += posturePoints[i];
:i++;
endwhile (<color:red>no)
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
stop
start
note right:  Program.CalculateJump
:far = (int)far;
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
stop
footer
generated with the DiagramCreator by Prof.Gehrer
end footer
@enduml
